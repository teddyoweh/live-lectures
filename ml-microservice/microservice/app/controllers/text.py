data_source = """
 website here is some echML. So if you ever seen watch cop dramas, if you see drama and they show code, most of the time they're usually showing, well actually, you know, maybe 10 years ago, they used to always show echML, nowadays it gotten a little bit more, a little bit smarter with the code that they show. But whenever you see that kind of pause it, you know, it's check what they have. Here's Amazon.com with on the left, and here is Amazon. The same exact website with only the HTML on the right. This kind of shows you why CSS matters, why jobs could matter, right? But this also explains what each you know does for you. It's a structure of the application. It loads, it often loads in a lot of the images and styles that you need to work. But CSS is what actually moves the styles in the styles in the right. it applies them to the right images, applies them to the right paragraphs, and makes things actually usable. So here is Bearbones Amazon.com. So, H.T.M. So H.P. stands for hypertext, the mark of language. It is the market language that we use to control the content and structure of web pages. If you think about metaphor, right, maybe people like, you know, people like, the bones, or your han. everything that's like there and it holds you up. Then maybe the JavaScript is, you know, maybe your internal systems that are moving around that move your blood around, the oxygen around your body, move on nerves, signals around your body. Maybe CSS is actually what makes you, makes you, you look a certain way. So in this kind of metaphor, H-ChML is the ground that you walk on, right. And then everything else kind of, kind of, anything else kind of built on top of that. So if you look at this, you know, there's a popular computer game out there on the web, but it used to be popular probably not anymore. Here's an example of this game that just had HTML, you might see everything laid out in this box-like format. You can now make the box round and put the eyes in the right spot, put the mouth in the right spot. And then if you have JavaScript, then you can make this an interactible game where you can use controls to control the players and do it up you like. So, H-ML, the main thing that you want to remember is it's boxes, it's boxes and boxes and boxes and boxes and boxes, boxes, and boxes, all, all the So, it's not. It's Chamel. The main thing that you want to remember is it's boxes, it's boxes and boxes and boxes and boxes and boxes all the way down. It's just boxes. If you see a circle, it's just a box. It's a box. Unless it's an S-V-V-G. For the most part, everything's boxes. So here, you see you two, you two. everything's boxes. So here you two. We see this one big box. You see the big box over the whole page, that's a box. And then you can also see this search, this header at the top, that's also a box. This left now is a box. And inside has several sections which are also boxes. Those have several items in them, which are also boxes. With more boxes, this has more boxes and more boxes and more boxes, and more boxes, several sections which are also boxes. Those have several items in them, which are also boxes. With more boxes, this has more boxes and more boxes and more boxes and more boxes, right? So, H. H.M. and boxes is just boxes, all websites. So boxes and boxes and boxes with CSS make it seem like it's not. Right. When you think about it, and when you are structuring your website, you want to think about where the boxes, how many places, how many places, how many places, You want to think about where are the boxes, how am I placing the boxes. Do I need this box inside of this box or should this box be next to this box, right? And that's how that's kind of how you do you do your website. So honestly if I were going to be maybe two, I would do this right here. I would box it up. And then I would start deciding, okay, which do these boxes look the same? You know, right? this box. maybe I'll use one piece of code to control both. And I would do that process of dividing into boxes and figuring out what common boxes to have just term on the phone is app. That's another question. Another thing we'll talk about over there. Here's an example of HTML. So we're not going to go through all right to HTML, because that's impossible. People have the whole jobs, that's throughout application development. and if I was going to say I could say I could teach you, but here, but here. But here's an example, is all of the HTML tag, has a head tag where you have header information. This is the information that you see at the top of your phone address car. So actually this information right here, you see how this is Morgan hats up here. That is your head, that's the title right here, that's someone writes here. And then inside the body of your web page, you have things like H1, which stands for headings for paragraphs, and you use many different things here. And then inside the body of your webpage, you have things like H1, which stands for headings. P's, which stands for paragraphs, and you use many different things called tags to build your website. Here's an H1, this code running in a web browser. But here you see title is the thing that's up here in the tab. Heading is an H1 time, so I mean it should be, H1 stands for heading 1. 1. So here you see it here. And P stands for paragraphs that's why you see it as a paragraph. So each these, H1P, volume, head, these are all called tags and there are many different tags in the HTML, one thing I get used to googling is HTML semantic tags to figure out the right tag which you should be using. So inside, you can notice that each tag has both an open tag and a closing tag. So, the tag has an open tag here, which is just an and then the word HTML. All the tags have that. You can see that for head, title, by H1D, though not all tags, and the entire So here it is again. It's now open down, you have your content inside of it, and then you have a closing tab. So if you already see this box, this is boxes inside the box. It's an email is one box, and the content inside is another box, is another box, inside of it, and all the one down. There you go, there are the boxes highlighted. There is two websites that I'm going to talk about these at the end as well that we go to. W3 schools is a great website. W3 schools lets you try out all different each mile elements. It will show you examples and then if you're feeling spicy a little more advanced Mozilla Development Network is always better. But if you're starting out new, then W3 schools is probably best for you. If you need the actual low down details and the end up the internet. great websites that will teach you how to do HTML that have little games where you write your email and you're like email with and all just flashflows at the end. So things we remember about about H&L and H&L is the building box, it's like the phones of your website, it's boxes, right, boxes within boxes. Next we go to S, GASANS. GASANS. So CSS is how you style your boxes. How do you make them look pretty, how you move round, it's how you move up now, it's how you move up now, it's how you move up now, it's how you move up now, it's how you move up now, it's how you move up now, it's how you move up now, it's how you move up and dynamically move them up and down to JavaScript. But it rhymes. So anyway, next, CSS actually just a list of descriptions. So it's not really code, it's not really a coding language in the way of JavaScript or Python or Java is a coding language. Those CSS is advancing every day. It says turn that box blue, turn that box red, make that box 60 pixels high. That's all CSS is. And so having multiple one, the thing about CSS is knowing what the rules to apply and how to maybe define those descriptions. We're going to some examples. So here is a CSS rule. It has multiple different parts. dot CSS or sometimes you're writing different languages that are transpial to CSS. Each CSS rule has a selector. This determines what types of things in the HML this CSS rule will apply to. So any body tag will now have this rule apply to. This description applies to any body tag. Inside, you have key value pairs, so you have properties and values. So your property is color, so your property here is color. You can probably guess what that controls on a body tag right? It controls the color. It controls specifically actually the color of the text. Does not control the color of the background. And here is a value, a hex value 3 through through three, which is some color. I think it's that teal color, but it doesn't look right on yours. And so all CSS rules will have some selector with brackets and inside will have a series of properties and values. really quickly since I think I can I'll just show you that right here. One thing that you should use if you're going to be web developer is called the Chrome Web Inspector. If you and this is also a sweet hack if you're never you're ever coding on website if you ever want to download stuff from the website, you're always just right click the website, go click Go click inspect and now you see all the code for this website and let's say that I had some videos on this website and I refresh the page all the videos would show up here and then it was I used to download them. But anyway so here you see the code or see examples here of the CSS. One really cool thing about this CSS inspector is that allows you to hover over different elements and see the actual So here I can over over this. And here, you can see that this thing here is a path. It has some fill and some fill pass. It might be hard for you all to see that. And you see that, you can see that, you can see that, and see that, you can see that and see that. I can also see the CSS over here. This is an example of CSS. This is, it has multiple multiple declarations in the subject of the CSS. Background color is this F-9 thing. Border bottom is one pencil solid follow-up. And you can see that we can always mess around with the CSS and break your website. So let's go to an easier website to mess around with my website. Move.com, do this may not go. And we have that team on the back and so much on the best sets. It's right that says the site can't be reached, I can say the site can be. Right, and the website changes. And I can also change the colors in the out of stuff. Let's see, it's like this color purple.... You see no internet, not. that's a great way to modify your code. Honestly, most of the times when I'm ever editing things in CSS, I will pull up the whole website, edit all the CSS using this Chrome respect to here, and then when I'm done, I'll copy all the stuff that I did over to the code and refresh the website. I'll play it looks the same. There's a lot easier way to edit and change CSS by using this inspector on the floor.. Back to our whirlwind of web programming, here is an example of a CSS rule set. Here the selector says that this rule set will apply to all dibs. It says apply the color red to it, apply the font, family aerial, and make the font size 24 fonts. This is the selector, you have properties and values like I mentioned before. And here we can show an example of style. styling things. So here we have the HTML before, hitting in paragraph. Now we add info and it's a new div info below. And we now have a style, style that CSS. D. D. is a tag that is kind of a generic tag. You can use it for anything. Honestly, you would use D. As your last resort, because there are many better ties from D. But often, D. It is the only task for things. Here's an example of changing both D. Red. So you can take div, color red, and everything it matches, all d's turn the text to red. So this is an example of CSS. You can use CSS straight directly on tags, but often the way that people use CSS, they define classes, and then they apply your CSS rules to classes. So you can do that by using the property of additional tax, a class, a class, a class, a and then changing your role to use dot-nephardt. You also use IDs like this, IDs-to-June. And so right before we go into JavaScript, so CSS, we know lots of things online that it helps you learn to CSS as well. One great application, that's like a game, it's called CSS diner. Google CSS diet and it is a great application. It's a fun game that helps you learn how to use CSS that language. Okay, JavaScript. So as a new programmer, a new web programmer, you may find HTML on CSS, or relatively easy to get used to. And then JavaScript comes along and, you know, your life gets a lot harder. So we've talked about HTML, which is the content structure, defines what exists, how it's ergonomics. We talked about CSS, which is the presentation, with the color, response, alignments, margins, border, shading, and the language content of the web page. mail and it's used by a majority of websites and by the websites and websites. Here's an example of JavaScript. What this program does is it adds a function to a click event on a button, it makes it so whenever you, whenever you should click a button on the page, this specific function is executed. That's why JavaScript is for your website, it lets people click on things, lets people mouse over things, and let things happen, it lets you grab data from the background. So, you're not related to Java. It's completely separate. But where is it though? It runs in the browser. So you can always try some JavaScript yourself by right clicking the page, clicking the inspector, and here you have a JavaScript and you want. and, and. you will see if correct. So I can set variables A equals that number, A times 8, and does you not important. So this inspector, the home inspector, is really great for learning JavaScript. My size problem is really. So, I'm sorry, I'm going to be here. So, I'm going to be there. So, I talked about JavaScript, we went to this. So quickly, JavaScript types and operators. So, JavaScript is all the normal types you expect. Cool. So I talked about JavaScript, we went to this. So quickly, JavaScript types and operators. So JavaScript is all the normal types you expect. Lillian, numbers, strings, null, and underbond. Operators work mostly how you expect. JavaScript has some very weird gotches. The thing about JavaScript, HTML and CSS, and CSS, which makes it really frustrating is that they will almost always work. they will almost always work. So the browser does some very tricky things to make sure that your code will work. You can write that in the email and you have open tag and no closing tag, your website will still run. You can have JavaScript that really doesn't make any sense, like a number of times a string, or a number divided by a string, right? And jobs just let it happen. And so browsers, because the way that the web evolved was that multiple different browsers had to write their own interpreter for JavaScript and CSS, multiple different browsers were write different interpreters. So you might write code in Internet Explorer and it does something different than on Google Chrome. Nowadays, you're all lucky that doesn't happen anymore, but when I start coding that that happened, and so the way that you had to build your browser was to be very commiss of it. you had to make it so that websites were up no matter how bad the website code was. And that's how, and that's how, that's why JobS Citi can do some really, really weird things and you will find that happening to you and you will find times where a email does some really, really weird things because it will run your broken code. same way. because the back, back was harder to improve. Yeah, so like you could write some, let's say I write some good code, you write some bad code, and the website works exactly the same way. A week later, somebody comes to my code base and has to add, you know, maybe add a new pop up, right? If it's good code, it's going to be a lot harder to you. Also, let's say we both, we both, you know, you know, you both. say we both implemented the same thing, we get a bug. If it's good code, it's easier to find the bug because you know the code should be working, right? The bug must be in how you're logic. If it's bad code, but the browser is fixing it for you and you may not realize why your code's not working. You may think that you wrote good code because it's working, right? But the browser may be secretly helping you under the table and you and you just don't know. and you just don't know. What do that answer to? Cool. They have comparison operators. There's a, and often in JavaScript, you use a triple equal sign. Here is syntax. So often in JavaScript, you can write functions by just doing this, using a prunty, pass them defining parameters, A and B, using the error function and using profits to surround your using brackets to surround your function. JavaScript loves brackets. If you're used to Python, Python loves spacing, tabs. JavaScript uses brackets, so no more tabbing. Don't worry about it anymore, as long as you put stuff in your brackets you're good on JavaScript. The JavaScript for variables, they often use cons to wet, which I think that all gets you a little bit. Commons use the slash slash or you can use, there's another way to do a multiline comments which actually isn't what I'm talking about. So here you think how you define variables, you define variables, my, only in my number, my string, and then changing the route of value can be changed. When these cons, to define a variable, the value should not be changed. And cons means the value cannot be reassigned. So all this stuff, I think you can figure out as you code JavaScript, so I'm not going to go through it. I'm going to spend some time on drug application development instead of, I guess. I have, is there a marketing? So let versus bar, right? So, what's the way to define variables. They don't use it anymore. Let is usually what you use. I'm not going to that. There's lots of different types. Arrays are present in JavaScript. Use them the same way as you use them in most other languages. You can index into them and you can replace values using the index, the index stuff this way. We use Pop and plush. Really, if you're thinking about using for a job chip, you should go check MDN for what's called W-T schools because they are really good. Control Flow is just as normal. Control flow is just as normal, they're conditional if statements. So here, instead of spaces, or tabs rather than 5,000, use graphics, the if and outfit, if there's if and others, if I'll pick and else. And why loops are pretty much the same as the 5 elements of the practice. of four loops, which I'm not going to all of them. But here is a simple four loop where you start a counter off at zero, you add one page time, and you stop it when it's equal to pet stop. So you only run while it's less than pet stop. There's another four loop. So you can do two, um, variables things like arrays or sets a mouse using cons. Um, fairly of the set, uh, the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of the set of set of set of set of set of set of set of set of set of set of set of set of set of. Now that's you do you do. So use love here instead of in, like you might use in Python. And then for functions, you can just use your parentheses, passing your parameters, use an arrow function and define your body with a pro-practice. This is the ability to define a function as a variable and then pass it to another function. These are often called callback variables. This is really important in JavaScript because it's how you do, it's how you do event handling JavaScript. When you use event handling JavaScript, often you have to say when you click this, run this function. Callbacks are the idea of passing the function that someone will run later. So here, modify array takes in some function and some function and some function and some function and some function and it will run later. and it will call that function inside of it. So it's something that you can't do in other languages which drives me by two pass functions around. All right, I want to get to resources, so I want to skip to the resources, I want to skip to the resources real good.
"""